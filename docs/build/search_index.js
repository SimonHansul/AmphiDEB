var documenterSearchIndex = {"docs":
[{"location":"#AmphiDEB.jl","page":"AmphiDEB.jl","title":"AmphiDEB.jl","text":"","category":"section"},{"location":"#Installation","page":"AmphiDEB.jl","title":"Installation","text":"","category":"section"},{"location":"","page":"AmphiDEB.jl","title":"AmphiDEB.jl","text":"AmphiDEB depends on EcotoxSystems.jl, which is curently not registered.  Installation thus requires","category":"page"},{"location":"","page":"AmphiDEB.jl","title":"AmphiDEB.jl","text":"using Pkg\nPkg.add(url=\"htts://github.com/simonhansul/EcotoxSystems.jl\")\nPkg.add(url=\"htts://github.com/simonhansul/AmphiDEB\")","category":"page"},{"location":"#TKTD-interface","page":"AmphiDEB.jl","title":"TKTD interface","text":"","category":"section"},{"location":"","page":"AmphiDEB.jl","title":"AmphiDEB.jl","text":"The TKTD module is designed so that mixtures with an arbitrary number of chemicals can be simulated,  and each chemical can act via arbitrary combinations of PMoAs. <br> For this pupose, TKTD parameters for sublethal effects are stored in matrices, where the rows represent chemicals and the columns represent PMoAs. <br> This affects the parameters k_D_j, e_j and b_j. <br> The PMoAs have a fixed order in the parameter matrices:","category":"page"},{"location":"","page":"AmphiDEB.jl","title":"AmphiDEB.jl","text":"Decrease in growth efficiency (G)\nIncrease in somatic and maturity maintenance costs (M)\nDecrease in assimilation efficiency (A)\nDecrease in reproduction efficiency (R)\nDecrease in maturity threshold for metamorphosis (H^-)\nIncrease in maturity threshold for metamorphosis (H^+)\nDecrease in kappa (kappa, acceleration of ontogenesis) (Kappa)","category":"page"},{"location":"#API","page":"AmphiDEB.jl","title":"API","text":"","category":"section"},{"location":"#AmphiDEB.AmphiDEB_ODE_alt!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.AmphiDEB_ODE_alt!","text":"Amphibian_DEB_alt!(du, u, p, t)::Nothing\n\nComplete ODE system for alternative formulation of the AmphiDEB model (see Amphibian_DEB_alt!)\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.AmphiDEB_ODE_with_linear_TD!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.AmphiDEB_ODE_with_linear_TD!","text":"AmphiDEB_ODE_with_linear_TD!(du, u, p, t)::Nothing\n\nODE system with liner toxicodynamics. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.AmphiDEB_ODE_with_loglogistic_TD!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.AmphiDEB_ODE_with_loglogistic_TD!","text":"AmphiDEB_ODE_with_loglogistic_TD!(du, u, p, t)::Nothing\n\nODE system with log-logistic toxicodynamics. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.AmphiDEB_global_rules!-Tuple{Any}","page":"AmphiDEB.jl","title":"AmphiDEB.AmphiDEB_global_rules!","text":"AmphiDEB_global_rules!(m)\n\nGlobal rule-based portion of the AmphiDEB IBM. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.Amphibian_DEB!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.Amphibian_DEB!","text":"Amphibian_DEB!(du, u, p, t)::Nothing\n\nThe default amphibian DEB model assumes a metamorphic reserve compartment, which is accumulated during larval development, and depleted during metamorphosis.  During metamorphosis, ingestion rate decreases gradually and reaches 0 at the end of metamorphosis.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.Amphibian_DEB_alt!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.Amphibian_DEB_alt!","text":"Amphibian_DEB_alt!(du, u, p, t)::Nothing\n\nAlternative formulation of the AmphiDEB model, where E_mt is viewed as a sub-compartment of structure. This leads to the following main differences:\n\nE_mt is subject to somatic maintenance \nE_mt contributes to the surface area scaling factor\nE_mt is affected by growth efficiency, as well as effects on growth efficiency\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.IBM_simulator-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.IBM_simulator","text":"IBM_simulator(\n    p::ComponentVector;\n\n    init_global_statevars = initialize_global_statevars,\n    global_ode! = AmphiDEB_global!,\n    global_rules! = AmphiDEB_global_rules!,\n    \n    init_individual_statevars = initialize_individual_statevars,\n    individual_ode! = AmphiDEB_individual_ODE_with_loglogistic_TD!, \n    individual_rules! = default_individual_rules!,\n    gen_ind_params = p -> EcotoxSystems.generate_individual_params(p; pth = p.pth),\n\n    kwargs...\n    )\n\nCompose and execute an individual-based simulation from the given components. <br> This function is a simple wrapper around EcotoxSystems.IBM_simulator. <br> Its main purpose is to provide a default configuration for the AmphiDEB model. \n\nPositional arguments\n\np: Parameters for all components: global (p.glb), Amphibian species-specific (p.spc) and pathogen-specific (p.pth)\n\nKeyword arguments\n\nSpecification of global part of the system\n\ninit_global_statevars: Function that initializes global state variables as ComponentVector, e.g. food abundance, temperature. \nglobal_ode!: Defintion of global ODE-based portion of the system (e.g. growth or experimental addition of food resource).\nglobal_rules!: Definition of global rule-based portion of the system (e.g. computing population aggregates).\n\nSpecification of species/individual-specific part of the system\n\ninit_individual_statevars: Function that initializes individual-level state variables as ComponentVector, e.g. structural mass, scaled adamge, etc.\nindividual_ode!: Definition of individual-level ODE-based portion of the system (e.g. derivatives of the DEB-TKTD module).\nindividual_rules!: Definition of individual-level rule-based portion of the system (e.g. death, discrete reproduction events).\ngen_ind_params: A function that converts species-specific parameters to individual-specific parameters. For parameters which are provided as distributions, this takes a random sample from the distribution each time an individual is generated. \n\nThis argument probably does not have to be changed, unless additional components (other than glb, spc and pth) are added to the system.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.ODE_simulator-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.ODE_simulator","text":"ODE_simulator(\n    p::ComponentVector; \n    model = AmphiDEB_ODE_M1!, \n    callbacks = AmphODE_callbacks(), \n    statevars_init = initialize_statevars,\n    kwargs...\n    )\n\nA wrapper around the EcotoxSystems.jl ODE_simulator  for application with the AmphiDEB model.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.TKTD_LL2!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.TKTD_LL2!","text":"TKTD_LL2!(du, u, p, t)::Nothing\n\nTKTD model with following configuration: \n\nMixture toxicity based on independent action (IA)\nLog-logistic relationship between damage and metabolic processes\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.TKTD_linear!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.TKTD_linear!","text":"TKTD_linear!(du, u, p, t)::Nothing\n\nTKTD model with following configuration: \n\nMixture toxicity based on independent action (IA)\nLinear-above-threshold relationship between damage and metabolic processes (the default DEBtox stress function)\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_H_eq_juv-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_H_eq_juv","text":"calc_H_eq_juv(spc::ComponentVector)\n\nCalculate equilibrium maturity for juvenile/adult stages. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_H_eq_lrv-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_H_eq_lrv","text":"calc_H_eq_lrv(spc::ComponentVector)\n\nCalculate equilibrium maturity for larval stage. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_S_B-Tuple{DataFrames.AbstractDataFrame}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_S_B","text":"calc_S_B(sim::AbstractDataFrame)\n\nExtracts structural mass at birth from simulation output. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_S_max_ad-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_S_max_ad","text":"calc_S_max_ad(spc::ComponentVector)\n\nAlias for calc_S_max_juv.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_S_max_juv-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_S_max_juv","text":"calc_S_max_juv(spc::ComponentVector)\n\nCalculates maximum structural mass of juveniles and adults from parameters. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_a_B-Tuple{DataFrames.AbstractDataFrame}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_a_B","text":"calc_a_B(sim::AbstractDataFrame)\n\nExtracts age at birth from simulation output. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_a_j1-Tuple{DataFrames.AbstractDataFrame}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_a_j1","text":"calc_a_j1(sim::AbstractDataFrame)\n\nExtract age at beginning of metamorphosis, j1, from simulation output. <br> Beginning of metamorphosis is defined as the point when feeding rates start to decline. <br> This can align with Gosner stage 42 for amphibians, but can also be as early as Gosner 38.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_a_j2-Tuple{DataFrames.AbstractDataFrame}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_a_j2","text":"calc_a_j2(sim::AbstractDataFrame)\n\nExtract age at the end of metamorphosis, based on depletion of metamorphic reserve. <br> Without providing an additional maturity threshold (and therefore an additional argument to this function),  this is the only plausible option we currently have.<br> In that case, the end of metamorphosis is reached when the reserve is depleted.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_a_j2-Union{Tuple{R}, Tuple{DataFrames.AbstractDataFrame, R}} where R>:Real","page":"AmphiDEB.jl","title":"AmphiDEB.calc_a_j2","text":"calc_a_j2(sim::AbstractDataFrame, H_j2)\n\nExtract age at the end of metamorphosis, based on a maturity threshold H_j2. <br>\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_kappa-NTuple{11, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_kappa","text":"calc_kappa(\n    embryo::Float64,\n    larva::Float64,\n    metamorph::Float64,\n    kappa_emb::Float64,\n    juvenile::Float64,\n    adult::Float64,\n    kappa_juv::Float64,\n    b_T::Float64, \n    T_ref::Float64,\n    y_K::Float64\n    )::Float64\n\nCalculate kappa accounting for life-stage, temperature effects and chemical effects. \n\nTemperature effects are implemented according to Romoli et al. (2024).\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_metamorphosis_duration-Tuple{DataFrames.AbstractDataFrame}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_metamorphosis_duration","text":"calc_metamorphosis_duration(sim::AbstractDataFrame)\n\nCalculate duration of metamorphosis. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.calc_vB_growthrate_lrv-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.calc_vB_growthrate_lrv","text":"calc_vB_growthrate_lrv(spc::ComponentVector)::Float64\n\nCalculate larval von Bertalanffy growth rate.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.dP_S-NTuple{9, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.dP_S","text":"function dP_S(\n    v0::Float64,\n    gamma::Float64,\n    P_Z::Float64,\n    eta::Float64,\n    f::Float64,\n    P_S::Float64,\n    sigma0::Float64,\n    sigma1::Float64,\n    Chi::Float64\n    )::Float64\n\nDerivative of the individual-specific sporangia abundace P_S.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.dP_Z-Tuple{Float64, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.dP_Z","text":"function dP_Z(\n    mu::Float64,\n    P_Z::Float64\n    )::Float64\n\nDerivative of the zoospore abundance P_Z. \n\nThis function does not take changes in zoopsore abundance due to infection into account.  This is handled in Pathogen_Infection!.\n\nargs: \n\nmu: Zoospore background mortality rate\nP_Z`: Current zoospore abundance in the environment\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.growth!-Tuple{Any, Any, Any, Any, Float64, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.growth!","text":"growth!(du, u, p, t)\n\nCalculation of life stage-specific growth fluxes for amphibians. <br>\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.growth_alt!-NTuple{6, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.growth_alt!","text":"growth_alt!(du, u, p, t)::Tuple{Real,Real}\n\nCalculation of growth fluxes for amphibians. <br> Returns life stage-specific values for eta_AS and kappa.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.ingestion!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.ingestion!","text":"ingestion!(du, u, p, t)::Nothing\n\nLife stage-specific calculation of ingestion rate for amphibians. <br> Note that this function requires all components to be included in the arguments du, u and p, so that we can access the external food concentration. <br> Hence, we have u.ind, u.glb, p.ind, etc., instead of simply u and p.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.ingestion_alt!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.ingestion_alt!","text":"ingestion!(du, u, p, t)::Nothing\n\nLife stage-specific calculation of ingestion rate for amphibians. <br> Note that this function requires all components to be included in the arguments du, u and p, so that we can access the external food concentration. <br> Hence, we have u.ind, u.glb, p.ind, etc., instead of simply u and p.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.initialize_individual_statevars-Tuple{ComponentArrays.ComponentVector}","page":"AmphiDEB.jl","title":"AmphiDEB.initialize_individual_statevars","text":"\"     initializeindividualstatevars(p::ComponentVector; kwargs...)::ComponentVector\n\nInitialize individual-level state variables for the AmhpiDEB model.  Additional states can be added via kwargs.  If existing states are provided via kwargs, these will be overwritten.\n\nIMPORTANT NOTE FOR SIMULATING MIXTURES:  You can simulate an arbitrary number of chemical stressors,  but it is currently not possible to dynamically change the shape of vectors and matrices contained in a ComponentVector.  In practice, this means: If you want to simulate mixtures, you cannot simply provide the parameters as kwargs to this function,  but the entire ComponentVector has to be re-defined.  You can do so by copy-pasting the definition body of this function and changing the shape of y_j.  The same is true for the parameter vector, where the shape of all TKTD parameters has to be adjusted.  An example is given in the unit tests of the EcotoxSystems package: https://github.com/SimonHansul/EcotoxSystems.jl/blob/main/test/test05_mixtures.jl For application to the AmphiDEB model, we have to take into account that it has an additional PMoA, and therefore an additional column in the sublethal TKTD parameters.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.life_stage_and_plasticity_effects-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.life_stage_and_plasticity_effects","text":"life_stage_and_plasticity_effects(du, u, p, t)::Tuple{Float64,Float64}\n\nHandles life-stage specificity of parameters.  The parameter notation foresees that the superscript indicates the first life stage for which a value is valid, e.g. if we have etaASemb and etaASjuv, then etaASemb is applied for eymbros, larvae and metamorphs, and etaASjuv is applied for juveniles and adults\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.maintenance!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.maintenance!","text":"maintenance!(du, u, p, t)::Nothing\n\nCalculation of maintenance fluxes for amphibians.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.maintenance_alt!-NTuple{4, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.maintenance_alt!","text":"maintenance!(du, u, p, t)::Nothing\n\nCalculation of maintenance fluxes for amphibians.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.maturation!-Tuple{Any, Any, Any, Any, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.maturation!","text":"maturation!(du, u, p, t, kappa)::Nothing\n\nCalculation of maturation fluxes for amphibians.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.metamorphic_reserve!-Tuple{Any, Any, Any, Any, Float64, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.metamorphic_reserve!","text":"metamorphic_reserve!(du, u, p, t, kappa)::Nothing\n\nCalculation of metamorphic reserve dynamics for amphibians. <br> Metamorphic reserve is accumulated during larval development and depleted during metamorphic climax. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.metamorphic_reserve_alt!-NTuple{6, Any}","page":"AmphiDEB.jl","title":"AmphiDEB.metamorphic_reserve_alt!","text":"metamorphic_reserve!(du, u, p, t, kappa)::Nothing\n\nCalculation of metamorphic reserve dynamics for amphibians. <br> Metamorphic reserve is accumulated during larval development and depleted during metamorphic climax. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.minimal_TK_aquatic-NTuple{4, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.minimal_TK_aquatic","text":"minimal_TK_aquatic(\n    larva::Float64,\n    k_D::Float64, \n    C_W::Float64,\n    D::Float64\n    )::Float64\n\nMinimal TK model (no feedbacks) for aquatic exposure.  Only applies to larvae.\n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.temperature_sinusoidal-NTuple{4, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.temperature_sinusoidal","text":"temperature_sinusoidal(t::Float64, T_max::Float64, T_min::Float64, t_peak ::Float64)::Float64\n\nCalculate seasonal fluctuations in temperature from a sinusoidal function. \n\n\n\n\n\n","category":"method"},{"location":"#AmphiDEB.y_T-Tuple{Float64, Float64, Float64}","page":"AmphiDEB.jl","title":"AmphiDEB.y_T","text":"y_T(\n    T_A::Float64,\n    T_ref::Float64,\n    T::Float64\n    )::Float64\n\nCalculates temperature correction coefficient y_T according to Arrhenius equation.\n\nT_A : Arrhenius temperature (K)\nT_ref : Reference temperature (K)\nT : Current ambient temperature\n\n\n\n\n\n","category":"method"}]
}
